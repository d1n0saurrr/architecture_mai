openapi: '3.0.0'
info:
  version: '1.0.0'
  title: 'Arch API'
  description: 'Описание API сервера сервиса поиска попутчиков'
paths:
  /auth/sign/up:
    servers: 
      - url: http://localhost:8081/
    post:
        summary: User creation
        requestBody:
          description: New user fields
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - login
                  - password
                  - email
                  - firstName
                  - lastName
                properties:
                  login:
                    type: string
                  password:
                    type: string
                  email:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string    
        responses:
          201:
            description: User created
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    id:
                      type: integer
          500:
            $ref: '#/components/responses/InternalServerException'
            
  /auth/sign/in:
    servers: 
      - url: http://localhost:8081/
    get:
      summary: Authorization
      responses:
        200:
          description: Session token created
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/InternalServerException'
      security: 
        - basicAuth: []

  /auth/validate:
    servers: 
      - url: http://localhost:8081/
    get:
      summary: Session token validation
      responses:
        200:
          description: Token is ok
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: integer
                  login:
                    type: string
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/InternalServerException'
      security:
        - bearerAuth: []

  /user:
    servers:
      - url: http://localhost:8082/
    get:
      summary: Get user by id
      parameters:
        - name: id
          description: User id
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    email:
                      type: string
                    login:
                      type: string
                    tel:
                      type: string
                    firstName:
                      type: string
                    lastName:
                      type: string
                    deleted:
                      type: boolean
        400:
          $ref: '#/components/responses/NotFoundException'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/InternalServerException'
      security:
        - bearerAuth: []
  
  /user/search:
    servers: 
      - url: http://localhost:8082/
    get:
      summary: Search users
      parameters:
        - name: first_name
          description: User first name
          in: query
          schema:
            type: string
        - name: last_name
          description: User last name
          in: query
          schema:
            type: string
        - name: email
          description: User email
          in: query
          schema:
            type: string
        - name: login
          description: User login
          in: query
          schema:
            type: string
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    email:
                      type: string
                    login:
                      type: string
                    tel:
                      type: string
                    firstName:
                      type: string
                    lastName:
                      type: string
                    deleted:
                      type: boolean
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/InternalServerException'
      security:
        - bearerAuth: []

  /route:
    servers: 
      - url: http://localhost:8082/
    post:
        summary: Route creation
        requestBody:
          description: New route fields
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - name
                  - points
                properties:
                  name:
                    type: string
                  points:
                    $ref: '#/components/schemas/points'
        responses:
          201:
            description: Route created
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    id:
                      type: integer
          401:
            $ref: '#/components/responses/UnauthorizedError'
          500:
            $ref: '#/components/responses/InternalServerException'
        security:
          - bearerAuth: []
    get:
          summary: Get user routes
          parameters:
            - name: id
              description: User id
              required: true
              in: query
              schema:
                type: integer
          responses:
            201:
              description: Route created
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      id:
                        type: integer
            400:
              $ref: '#/components/responses/NotFoundException'
            401:
              $ref: '#/components/responses/UnauthorizedError'
            500:
              $ref: '#/components/responses/InternalServerException'
          security:
            - bearerAuth: []
    
  /trip:
    servers: 
      - url: http://localhost:8083/
    post:
        summary: Trip creation
        requestBody:
          description: New trip fields
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - authorId
                  - name
                  - description
                  - routeId
                  - date
                properties:
                  authorId:
                    type: integer
                  name:
                    type: string
                  description:
                    type: string
                  routeId:
                    type: integer
                  date:
                    description: DateTime format - [YYYY-mm-dd HH:MM:ss]
                    example: "2023-04-10 21:07:03"
                    type: string
                    format: date-time
        responses:
          201:
            description: Trip created
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    id:
                      type: integer
          401:
            $ref: '#/components/responses/UnauthorizedError'
          500:
            $ref: '#/components/responses/InternalServerException'
        security:
          - bearerAuth: []
    get:
        summary: Get trip
        parameters:
          - name: id
            description: Trip id
            in: query
            required: true
            schema:
              type: integer
        responses:
          200:
            description: Trip fields
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/trip'
          401:
            $ref: '#/components/responses/UnauthorizedError'
          500:
            $ref: '#/components/responses/InternalServerException'
        security:
          - bearerAuth: []
    
  /trips:
    servers: 
      - url: http://localhost:8083/
    get:
        summary: All trips
        responses:
          200:
            description: Trips
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/trip'
          401:
            $ref: '#/components/responses/UnauthorizedError'
          500:
            $ref: '#/components/responses/InternalServerException'
        security:
          - bearerAuth: []
                    

components:
  schemas:
    points:
      description: Array of route points
      type: array
      items:
        type: string
    trip:
      description: Trip fields
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        route_id:
          type: integer
        date:
          type: string
          format: date-time

  responses:
    UnauthorizedError:
      description: Session token validation failed or bad user credits
    InternalServerException:
      description: Unexpected internal server exeption
    NotFoundException:
      description: Entity not found
  securitySchemes:
      basicAuth:     
        type: http
        scheme: basic
      bearerAuth:
        type: http
        scheme: bearer
      
